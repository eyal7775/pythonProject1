def servers = [
  "LC": "10.0.2.32",
  "QA": "10.0.2.42",
  "SYNTH": "10.0.2.53",
  "CDP": "10.0.2.61",
]
/* properties([
    parameters([
        choice(choices: ["LC","QA","SYNTH","CDP"], name: 'ENV')
    ])
])*/
pipeline {
    agent { label 'windows' }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/dev1']], extensions: [], userRemoteConfigs: [[credentialsId: 'job_2', url: 'https://github.com/eyal7775/pythonProject1.git']]])
            }
        }
        stage('Build') {
            steps {
                git branch: 'dev1', credentialsId: 'job_2', url: 'https://github.com/eyal7775/pythonProject1.git'
                script {
                    for (elem in servers) {
                        SHELL_SCRIPT = sh (
                            script: "python main.py -f ${elem.key}.txt -e ${elem.value} ;cat ${env.WORKSPACE}/${elem.key}.txt"
                            returnStdout: true
                        ).trim()
                        // powershell "python main.py -f ${elem.key}.txt -e ${elem.value}"
                        // powershell "cat ${env.WORKSPACE}/${elem.key}.txt"
                    }
                }
                // powershell "python main.py -f ${params.ENV}.txt -e " + servers["${params.ENV}"]
                // powershell "cat ${env.WORKSPACE}/${params.ENV}.txt"
            }
        }
        stage('Test') {
            steps {
                echo 'the job has been tested'
            }
        }
    }
}